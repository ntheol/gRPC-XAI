# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import influence_service_copy_pb2 as influence__service__copy__pb2


class InfluenceServiceCopyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ComputeInfluences = channel.stream_unary(
                '/influence_service_copy.InfluenceServiceCopy/ComputeInfluences',
                request_serializer=influence__service__copy__pb2.InfluenceRequest.SerializeToString,
                response_deserializer=influence__service__copy__pb2.InfluenceResponse.FromString,
                )
        self.ComputePDP = channel.unary_unary(
                '/influence_service_copy.InfluenceServiceCopy/ComputePDP',
                request_serializer=influence__service__copy__pb2.PDPRequest.SerializeToString,
                response_deserializer=influence__service__copy__pb2.PDPResponse.FromString,
                )
        self.ComputePDP2D = channel.unary_unary(
                '/influence_service_copy.InfluenceServiceCopy/ComputePDP2D',
                request_serializer=influence__service__copy__pb2.PDP2DRequest.SerializeToString,
                response_deserializer=influence__service__copy__pb2.PDP2DResponse.FromString,
                )
        self.ComputeALE = channel.unary_unary(
                '/influence_service_copy.InfluenceServiceCopy/ComputeALE',
                request_serializer=influence__service__copy__pb2.ALERequest.SerializeToString,
                response_deserializer=influence__service__copy__pb2.ALEResponse.FromString,
                )


class InfluenceServiceCopyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ComputeInfluences(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputePDP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputePDP2D(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeALE(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InfluenceServiceCopyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ComputeInfluences': grpc.stream_unary_rpc_method_handler(
                    servicer.ComputeInfluences,
                    request_deserializer=influence__service__copy__pb2.InfluenceRequest.FromString,
                    response_serializer=influence__service__copy__pb2.InfluenceResponse.SerializeToString,
            ),
            'ComputePDP': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputePDP,
                    request_deserializer=influence__service__copy__pb2.PDPRequest.FromString,
                    response_serializer=influence__service__copy__pb2.PDPResponse.SerializeToString,
            ),
            'ComputePDP2D': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputePDP2D,
                    request_deserializer=influence__service__copy__pb2.PDP2DRequest.FromString,
                    response_serializer=influence__service__copy__pb2.PDP2DResponse.SerializeToString,
            ),
            'ComputeALE': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeALE,
                    request_deserializer=influence__service__copy__pb2.ALERequest.FromString,
                    response_serializer=influence__service__copy__pb2.ALEResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'influence_service_copy.InfluenceServiceCopy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InfluenceServiceCopy(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ComputeInfluences(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/influence_service_copy.InfluenceServiceCopy/ComputeInfluences',
            influence__service__copy__pb2.InfluenceRequest.SerializeToString,
            influence__service__copy__pb2.InfluenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputePDP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/influence_service_copy.InfluenceServiceCopy/ComputePDP',
            influence__service__copy__pb2.PDPRequest.SerializeToString,
            influence__service__copy__pb2.PDPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputePDP2D(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/influence_service_copy.InfluenceServiceCopy/ComputePDP2D',
            influence__service__copy__pb2.PDP2DRequest.SerializeToString,
            influence__service__copy__pb2.PDP2DResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeALE(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/influence_service_copy.InfluenceServiceCopy/ComputeALE',
            influence__service__copy__pb2.ALERequest.SerializeToString,
            influence__service__copy__pb2.ALEResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
